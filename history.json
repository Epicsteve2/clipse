{"clipboardHistory":[{"value":"{","recorded":"2024-02-12 18:54:14.557423769 +0000 UTC"},{"value":"currentUser, err := user.Current()\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// Construct the path to the config directory\n\tconfigDir := filepath.Join(currentUser.HomeDir, \".config\", configDirName)\n\tfullPath := filepath.Join(configDir, fileName)","recorded":"2024-02-12 18:51:07.694692301 +0000 UTC"},{"value":"newItemDelegate","recorded":"2024-02-12 18:47:11.936176917 +0000 UTC"},{"value":"data.ClipboardHistory","recorded":"2024-02-12 18:46:05.830292963 +0000 UTC"},{"value":"deleteJsonItem","recorded":"2024-02-12 18:44:44.886714026 +0000 UTC"},{"value":"getjsonData","recorded":"2024-02-12 18:43:45.016638604 +0000 UTC"},{"value":"else if err != nil {\n\t\t\tfmt.Println(\"Unable to check if config file exists.\")\n\t\t\tos.Exit(1)\n\t\t}","recorded":"2024-02-12 18:42:51.960891658 +0000 UTC"},{"value":"checkConfig","recorded":"2024-02-12 18:40:35.512087751 +0000 UTC"},{"value":"return fullPath, nil","recorded":"2024-02-12 18:30:32.673966936 +0000 UTC"},{"value":"func checkConfig() string, error {\n\tcurrentUser, err := user.Current()\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\tos.Exit(1)\n\t}","recorded":"2024-02-12 18:29:47.652295843 +0000 UTC"},{"value":"createHistoryFile","recorded":"2024-02-12 18:21:32.744814 +0000 UTC"},{"value":"setBaseConfig","recorded":"2024-02-12 18:14:19.695167242 +0000 UTC"},{"value":"return nil","recorded":"2024-02-12 18:14:05.457722327 +0000 UTC"},{"value":"file, err := os.Create(configDir) \n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\n\n\t\t\tdefer file.Close()\n\n\t\t\terr = setBaseConfig()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tbaseConfig := ClipboardHistory{\n\t\t\t\tClipboardHistory: []ClipboardEntry{},\n\t\t\t}\n\t\t\tencoder := json.NewEncoder(file)\n\t\t\tencoder.SetIndent(\"\", \"    \")\n\t\t\tif err := encoder.Encode(baseConfig); err != nil {\n\t\t\t\treturn err\n\t\t\t}","recorded":"2024-02-12 18:13:19.377176777 +0000 UTC"},{"value":"file, err := os.Create(configDir) \n\t\tif err != nil {\n\t\t\treturn err\n\t\t}","recorded":"2024-02-12 18:11:59.675864951 +0000 UTC"},{"value":"err = createConfigDir(configDir)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Failed to create config dir. Please create:\", configDir)\n\t\t\tos.exit(1)\n\t\t}","recorded":"2024-02-12 18:10:41.732011614 +0000 UTC"},{"value":"if err := os.MkdirAll(configDir, 0755); err != nil {\n\t\tfmt.Println(\"Error creating config directory:\", err)\n\t\tos.Exit(1)\n\t}","recorded":"2024-02-12 18:05:07.943973591 +0000 UTC"},{"value":"if err := os.MkdirAll(configDir, 0755); err != nil {\n            fmt.Println(\"Error creating config directory:\", err)\n            return\n        }","recorded":"2024-02-12 18:03:28.886382307 +0000 UTC"},{"value":"_, err = os.Stat(configDir)\n    if os.IsNotExist(err)","recorded":"2024-02-12 18:02:21.358911899 +0000 UTC"},{"value":"_, err = os.Stat(configDir)\n    if os.IsNotExist(err) {","recorded":"2024-02-12 18:02:17.466985288 +0000 UTC"},{"value":"currentUser, err := user.Current()\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\t\n\t// Construct the path to the config directory\n    configDir := filepath.Join(currentUser.HomeDir, \".config\", configDirName)","recorded":"2024-02-12 17:57:05.913640455 +0000 UTC"},{"value":"currentUser, err := user.Current()\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}","recorded":"2024-02-12 17:57:00.696383735 +0000 UTC"},{"value":"/ Construct the path to the config directory\n    configDir := filepath.Join(currentUser.HomeDir, \".config\", configDirName)\n\n    // Create the directory if it doesn't exist\n    if err := os.MkdirAll(configDir, 0755); err != nil {\n        fmt.Println(\"Error creating config directory:\", err)\n        return\n    }\n\n    fmt.Println(\"Config directory created:\", configDir)","recorded":"2024-02-12 17:51:55.436762133 +0000 UTC"},{"value":"configDirName = \"clipboard_manager\"","recorded":"2024-02-12 17:48:35.487670042 +0000 UTC"},{"value":" currentUser, err := user.Current()\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    // Concatenate the user's home directory path with the relative file path\n    filePath := filepath.Join(currentUser.HomeDir, fileName)","recorded":"2024-02-12 17:45:07.054287447 +0000 UTC"},{"value":"\"os/user\"","recorded":"2024-02-12 17:44:04.488803368 +0000 UTC"},{"value":"const (\n\tfileName = \"../clipboard_history.json\"\n)","recorded":"2024-02-12 17:40:38.660280172 +0000 UTC"},{"value":"shellCmd.Run()","recorded":"2024-02-12 17:31:53.508795956 +0000 UTC"},{"value":"err := checkConfig()\n\tif err != nil {\n\t\tfmt.Println(\"No clipboard_history.json file found in path. Failed to create:\", err)\n\t\treturn\n\t}","recorded":"2024-02-12 17:29:52.705883005 +0000 UTC"},{"value":"exec.Command(\"pkill\", \"-f\", os.Args[0])","recorded":"2024-02-12 17:25:08.055060705 +0000 UTC"},{"value":"shellCDM","recorded":"2024-02-12 17:24:29.396154135 +0000 UTC"},{"value":"// Kill existing clipboard processes","recorded":"2024-02-12 17:21:48.921148973 +0000 UTC"},{"value":"go run main.go","recorded":"2024-02-12 17:18:44.506651037 +0000 UTC"},{"value":"`nohup go run main.go --start \u003e/dev/null 2\u003e\u00261 \u0026`","recorded":"2024-02-12 17:15:58.800415394 +0000 UTC"},{"value":"pkill -f \"go run main.go\"","recorded":"2024-02-12 17:13:18.723481671 +0000 UTC"},{"value":"❯ pkill \"go run main.go\"\n❯ ps aux | grep main.go\nmichael    14034  0.0  0.0 1242148 17220 pts/0   Sl   08:28   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026\nmichael  2189430  0.0  0.0   6640  2560 pts/2    S+   17:12   0:00 grep main.go\nmichael  2745112  0.0  0.0 1241892 17172 ?       Sl   13:42   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026","recorded":"2024-02-12 17:12:54.068821311 +0000 UTC"},{"value":"pkill \"go run main.go\"","recorded":"2024-02-12 17:12:44.744357451 +0000 UTC"},{"value":"❯ pkill main.go\n❯ ps aux | grep main.go\nmichael    14034  0.0  0.0 1242148 17220 pts/0   Sl   08:28   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026\nmichael  2181632  0.0  0.0   6640  2560 pts/2    S+   17:12   0:00 grep main.go\nmichael  2745112  0.0  0.0 1241892 17172 ?       Sl   13:42   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026","recorded":"2024-02-12 17:12:26.523448508 +0000 UTC"},{"value":"❯ ps aux | grep main.go\nmichael    14034  0.0  0.0 1242148 17220 pts/0   Sl   08:28   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026\nmichael  1927577  0.0  0.0   6640  2560 pts/2    S+   16:58   0:00 grep main.go\nmichael  2745112  0.0  0.0 1241892 17172 ?       Sl   13:42   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026\n❯ pkill 14034\n❯ ps aux | grep main.go\nmichael    14034  0.0  0.0 1242148 17220 pts/0   Sl   08:28   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026\nmichael  2128391  0.0  0.0   6640  2688 pts/2    S+   17:09   0:00 grep main.go\nmichael  2745112  0.0  0.0 1241892 17172 ?       Sl   13:42   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026","recorded":"2024-02-12 17:11:54.655225709 +0000 UTC"},{"value":"❯ ps aux | grep main.go\nmichael    14034  0.0  0.0 1242148 17220 pts/0   Sl   08:28   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026\nmichael  1927577  0.0  0.0   6640  2560 pts/2    S+   16:58   0:00 grep main.go\nmichael  2745112  0.0  0.0 1241892 17172 ?       Sl   13:42   0:00 go run main.go listen-start-background-process-0088 \u003e/dev/null 2\u003e\u00261 \u0026","recorded":"2024-02-12 16:58:17.09868702 +0000 UTC"},{"value":"func runListener() error {\n\t// Listen for SIGINT (Ctrl+C) and SIGTERM signals to properly close the program\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, syscall.SIGINT, syscall.SIGTERM)\n\n\t// Load existing data from file, if any\n\tvar data Data\n\terr := loadDataFromFile(fileName, \u0026data)\n\tif err != nil {\n\t\tfmt.Println(\"Error loading data from file:\", err)\n\t}\n\n\t// Start a goroutine to continuously monitor clipboard changes\n\tgo func() {\n\t\tfor {\n\t\t\t// Get the current clipboard content\n\t\t\ttext, err := clipboard.ReadAll()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error reading clipboard:\", err)\n\t\t\t}\n\n\t\t\t// If clipboard content is not empty and not already in the list, add it\n\t\t\tif text != \"\" \u0026\u0026 !contains(data.ClipboardHistory, text) {\n\t\t\t\t// If the length exceeds 50, remove the oldest item\n\t\t\t\tif len(data.ClipboardHistory) \u003e= 50 {\n\t\t\t\t\tlastIndex := len(data.ClipboardHistory) - 1\n\t\t\t\t\tdata.ClipboardHistory = data.ClipboardHistory[:lastIndex] // Remove the oldest item\n\t\t\t\t}\n\n\t\t\t\ttimeNow := strings.Split(time.Now().UTC().String(), \"+0000\")[0]\n\n\t\t\t\titem := ClipboardItem{Value: text, Recorded: timeNow}\n\n\t\t\t\tdata.ClipboardHistory = append([]ClipboardItem{item}, data.ClipboardHistory...)\n\t\t\t\t//fmt.Println(\"Added to clipboard history:\", text)\n\n\t\t\t\t// Save data to file\n\t\t\t\terr := saveDataToFile(fileName, data)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Println(\"Error saving data to file:\", err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check for updates every 0.1 second\n\t\t\ttime.Sleep(100 * time.Millisecond / 10)\n\t\t}\n\t}()\n\n\n\t// Wait for SIGINT or SIGTERM signal\n\t\u003c-interrupt\n\treturn nil\n}","recorded":"2024-02-12 16:55:39.036325246 +0000 UTC"},{"value":"// Wait for SIGINT or SIGTERM signal\n\t\u003c-interrupt\n\treturn nil","recorded":"2024-02-12 16:55:33.063192084 +0000 UTC"},{"value":"for {\n\t\t\t// Get the current clipboard content\n\t\t\ttext, err := clipboard.ReadAll()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error reading clipboard:\", err)\n\t\t\t}\n\n\t\t\t// If clipboard content is not empty and not already in the list, add it\n\t\t\tif text != \"\" \u0026\u0026 !contains(data.ClipboardHistory, text) {\n\t\t\t\t// If the length exceeds 50, remove the oldest item\n\t\t\t\tif len(data.ClipboardHistory) \u003e= 50 {\n\t\t\t\t\tlastIndex := len(data.ClipboardHistory) - 1\n\t\t\t\t\tdata.ClipboardHistory = data.ClipboardHistory[:lastIndex] // Remove the oldest item\n\t\t\t\t}\n\n\t\t\t\ttimeNow := strings.Split(time.Now().UTC().String(), \"+0000\")[0]\n\n\t\t\t\titem := ClipboardItem{Value: text, Recorded: timeNow}\n\n\t\t\t\tdata.ClipboardHistory = append([]ClipboardItem{item}, data.ClipboardHistory...)\n\t\t\t\t//fmt.Println(\"Added to clipboard history:\", text)\n\n\t\t\t\t// Save data to file\n\t\t\t\terr := saveDataToFile(fileName, data)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Println(\"Error saving data to file:\", err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check for updates every 0.1 second\n\t\t\ttime.Sleep(100 * time.Millisecond / 10)\n\t\t}","recorded":"2024-02-12 16:53:23.952080621 +0000 UTC"},{"value":"// Check for updates every 0.1 second\n\t\t\t//duration := 100 * time.Millisecond / 10\n\t\t\ttime.Sleep(100 * time.Millisecond / 10)\n\t\t}","recorded":"2024-02-12 16:51:59.865636279 +0000 UTC"},{"value":"100 * time.Millisecond / 10","recorded":"2024-02-12 16:51:41.345139223 +0000 UTC"},{"value":"T := strings.Split(time.Now().UTC().String(), \"+0000\")[0]","recorded":"2024-02-12 16:49:17.210554198 +0000 UTC"},{"value":"time.Now().UTC().String()","recorded":"2024-02-12 16:48:56.454524944 +0000 UTC"},{"value":"\u003ctemplate id=\"canvas-clipboard\" data-canvas-clipboard=\"W3sidHlwZSI6ImNvbm5lY3RvciIsInByZXNlbnRhdGlvbiI6Miwic2VnbWVudHMiOlt7InR5cGUiOiJsaW5lIiwiYW5nbGUiOjEuNTcwNzk2MzI2Nzk0ODk2NiwibGVuZ3RoIjo4fSx7InR5cGUiOiJsaW5lIiwiYW5nbGUiOjEuNTcwNzk2MzI2Nzk0ODk2NiwibGVuZ3RoIjo3NC41Mzg1NzQyMTg3NX0seyJ0eXBlIjoibGluZSIsImFuZ2xlIjoxLjU3MDc5NjMyNjc5NDg5NjYsImxlbmd0aCI6OH1dLCJzdGFydCI6WzAsLTY0LjExMjMwNDY4NzVdLCJlbmQiOlswLDY0LjExMjU0ODgyODEyNV0sInBvc2l0aW9uIjp7IngiOjAsInkiOjAsInR5cGUiOiJWZWN0b3IyIn0sInNpemUiOnsieCI6MCwieSI6MCwidHlwZSI6IlZlY3RvcjIifSwic291cmNlRWxlbWVudCI6Ino3MWtXVHdBWjg0R0tDM3VQckxZUCIsInRhcmdldEVsZW1lbnQiOiJZZmFiUF9zUEF4NVlNOUl6ZG44VVoiLCJzb3VyY2VBbmNob3IiOnsibGVmdCI6MC41LCJ0b3AiOjF9LCJ0YXJnZXRBbmNob3IiOnsibGVmdCI6MC41LCJ0b3AiOjB9LCJzdGFydENhcCI6MSwiZW5kQ2FwIjoyLCJjb2xvciI6eyJ4IjoxMTcsInkiOjEyOSwieiI6MTQ5LCJ0eXBlIjoiVmVjdG9yMyJ9LCJzdHJva2UiOjEsInNvdXJjZUluZGV4IjotMSwidGFyZ2V0SW5kZXgiOi0xfV0=\"\u003e\u003c/template\u003e","recorded":"2024-02-12 16:22:06.061789069 +0000 UTC"},{"value":" AFJ kicks in and updates NGSD: BetterCloud Callback field to Closed. Adds comment to access request and sends a slack alert.","recorded":"2024-02-12 16:21:43.671075837 +0000 UTC"},{"value":"\u003ctemplate id=\"canvas-clipboard\" data-canvas-clipboard=\"W3sidHlwZSI6InN0aWNreSIsInBvc2l0aW9uIjp7IngiOjAsInkiOjAsInR5cGUiOiJWZWN0b3IyIn0sInNpemUiOnsieCI6MTQ0LCJ5IjoxNDQsInR5cGUiOiJWZWN0b3IyIn0sImNvbG9yIjp7IngiOjEzMywieSI6MTg0LCJ6IjoyNTUsInR5cGUiOiJWZWN0b3IzIn0sInRleHQiOiJ7XCJ2ZXJzaW9uXCI6MSxcInR5cGVcIjpcImRvY1wiLFwiY29udGVudFwiOlt7XCJ0eXBlXCI6XCJwYXJhZ3JhcGhcIixcImNvbnRlbnRcIjpbe1widHlwZVwiOlwidGV4dFwiLFwidGV4dFwiOlwiIEFGSiBraWNrcyBpbiBhbmQgdXBkYXRlcyBOR1NEOiBCZXR0ZXJDbG91ZCBDYWxsYmFjayBmaWVsZCB0byBDbG9zZWQuIEFkZHMgY29tbWVudCB0byBhY2Nlc3MgcmVxdWVzdCBhbmQgc2VuZHMgYSBzbGFjayBhbGVydC5cIn1dfV19IiwiZm9udFNjYWxlIjoxLCJiYXNpc1NpemUiOnsieCI6MTQ0LCJ5IjoxNDQsInR5cGUiOiJWZWN0b3IyIn0sImJhc2lzUG9zaXRpb24iOnsieCI6MCwieSI6LTM5LCJ0eXBlIjoiVmVjdG9yMiJ9LCJhbGlnbm1lbnQiOiJjZW50ZXIifV0=\"\u003e\u003c/template\u003e\u003cp class=\"ak-editor-selected-node\"\u003e AFJ kicks in and updates NGSD: BetterCloud Callback field to Closed. Adds comment to access request and sends a slack alert.\u003c/p\u003e","recorded":"2024-02-12 16:21:39.106884328 +0000 UTC"}]}
